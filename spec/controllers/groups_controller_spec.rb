require 'spec_helper'
require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe GroupsController, type: :controller do

  # This should return the minimal set of attributes required to create a valid
  # Group. As you add validations to Group, be sure to
  # adjust the attributes here as well.
  let(:valid_user_1_attributes){
    {:email => "eric@eric.com", :password => "Ff123456", :password_confirmation => "Ff123456", :first_name => "Eric", :last_name => "Bechtold", :street => "Michael Street", :city => "Iowa City", :state => "Iowa", :zipcode => "12345", :phone => "1234567890"}
  }
  
  let(:valid_user_2_attributes){
    {:email => "eric2@eric.com", :password => "Ff123456", :password_confirmation => "Ff123456", :first_name => "Eric", :last_name => "Bechtold", :street => "Michael Street", :city => "Iowa City", :state => "Iowa", :zipcode => "12345", :phone => "1234567890"}
  }
  


  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # GroupsController. Be sure to keep this updated too.
 #let(:valid_session) { {} }


before(:each) do
  user1 = User.create valid_user_1_attributes
  user2 = User.create valid_user_2_attributes
end

  describe "GET #index" do
    it "gets all groups(filter in views)" do
      user1 = User.find_by_email("eric@eric.com")
      sign_in user1
      get :index
      expect(assigns(:groups)).to eq(Group.all)
    end
  end
  
 # describe "GET #show" do
  #  it "shows a group of a user based on group id " do
    
   # end
#  end
   
  describe "GET #new" do
    it "assigns a new group as @group" do
      user1 = User.find_by_email("eric@eric.com")
      sign_in user1
      get :new
      expect(assigns(:group)).to be_a_new(Group)
    end
  end

  describe "POST #create" do
    
    it "it create a new group for current user" do
      user1 = User.find_by_email("eric@eric.com")
      sign_in user1
      
      
      portfolio1 = Portfolio.create(:name => "Portfolio 1", :description => "First portfolio created for eric")
      portfolio2 = Portfolio.create(:name => "Portfolio 2", :description => "Second portfolio created for eric")
      user1.portfolios << portfolio1
      user1.portfolios << portfolio2
      user1.save
      
      post :create, {:group => {:name => "Group 1", :description => "First group created for eric2"}}
      expect(assigns(:group)).to be_a(Group)
    end
    it "cannot create a group with a invaild name" do 
      user1 = User.find_by_email("eric@eric.com")
      sign_in user1
      post :create, {:group => {:name => "", :description => "First group created for eric2"}}
      expect(assigns(:group)).to be_a(Group)
    end
  end
  

  describe "PUT #update" do
    let(:new_attributes) { {
      'name' => 'Group1 ',
      'description' => 'testing '
    }}
    let(:update_attributes) { {
      'name' => 'Group updated',
      'description' => 'testing '
      }}
      let(:invaild_attributes) { {
      'name' => '',
      'description' => 'testing '
      }}
    it "can update a existing group" do
      user1 = User.find_by_email("eric@eric.com")
      sign_in user1
      group = Group.create new_attributes
      put :update, {:id => group.to_param, :group => update_attributes}
      group.reload
      expect(controller.notice).to eq('Group was successfully updated.')
 #     expect(group.name).to eq("Group updated")
    end
     it "will fail to update a existing group with invaild attributes" do
      user1 = User.find_by_email("eric@eric.com")
      sign_in user1
      group = Group.create new_attributes
      put :update, {:id => group.to_param, :group => invaild_attributes}
      group.reload
      expect(assigns(:group)).to eq(group)
    end
  end
  
  describe "DELETE destroy" do
    let(:new_attributes) { {
      'name' => 'Group1 ',
      'description' => 'testing '
    }}
    
    it "can delete a existing group" do
      user1 = User.find_by_email("eric@eric.com")
      sign_in user1
      group =Group.create! new_attributes
      expect {
      delete :destroy, {:id => group.to_param}
        }.to change(Group, :count).by(-1)
    end
  end
  
end
